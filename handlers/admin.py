# admin.py
import os
from utils.config import Config
from telebot import types
from services.product_service import ProductService
from services.order_service import OrderService
from services.category_service import CategoryService
from utils.logger import logger
from services.db import SessionLocal
from models.product import Product

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
admin_data = {}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (Telegram ID)
ADMIN_IDS = Config.ADMIN_IDS

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤
MEDIA_DIR = "media"
os.makedirs(MEDIA_DIR, exist_ok=True)


def main_keyboard(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user_id in ADMIN_IDS:
        keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    else:
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    return keyboard


def add_cancel_button(text):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return text, keyboard


def register(bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    def is_admin(message):
        return message.from_user.id in ADMIN_IDS

    # –°—Ç–∞—Ä—Ç
    @bot.message_handler(commands=['start'])
    def start(message):
        kb = main_keyboard(message.from_user.id)
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        if user_id in ADMIN_IDS:
            bot.send_message(
                message.chat.id,
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=kb
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        else:
            bot.send_message(
                message.chat.id,
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.",
                reply_markup=kb
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    @bot.message_handler(commands=["admin"])
    def admin_panel(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        keyboard = main_keyboard(message.from_user.id)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

    # --- –û—Ç–º–µ–Ω–∞ ---
    @bot.callback_query_handler(func=lambda call: call.data == "cancel")
    def cancel_action(call):
        user_id = call.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        admin_data[user_id]["cancelled"] = True
        bot.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", chat_id=call.message.chat.id, message_id=call.message.message_id)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    def start_add_product(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        user_id = message.from_user.id
        admin_data[user_id] = {"cancelled": False}
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_product_name)

    def process_product_name(message):
        user_id = message.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        admin_data[user_id]["name"] = message.text
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_product_price)

    def process_product_price(message):
        user_id = message.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        try:
            admin_data[user_id]["price"] = float(message.text)
        except ValueError:
            text, keyboard = add_cancel_button("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
            msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, process_product_price)
            return
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_product_description)

    def process_product_description(message):
        user_id = message.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        desc = message.text
        admin_data[user_id]["description"] = None if desc.lower() == "–Ω–µ—Ç" else desc

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = CategoryService.get_all_categories()
        keyboard = types.InlineKeyboardMarkup()
        for c in categories:
            keyboard.add(types.InlineKeyboardButton(c.name, callback_data=f"category:{c.id}"))
        keyboard.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category:new"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def process_category(call):
        user_id = call.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        cat_id = call.data.split(":")[1]
        if cat_id == "new":
            text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            msg = bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, add_new_category)
        else:
            admin_data[user_id]["category_id"] = int(cat_id)
            text, keyboard = add_cancel_button("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            msg = bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data=admin_data[user_id]))

    def add_new_category(message):
        user_id = message.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        category = CategoryService.add_category(message.text)
        if category:
            admin_data[user_id]["category_id"] = category["id"]
            text, keyboard = add_cancel_button("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data=admin_data[user_id]))
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    def save_product_photo(bot, message, product_data=None, product_id=None):
        user_id = message.from_user.id
        if admin_data.get(user_id, {}).get("cancelled"):
            return
        if not message.photo:
            text, keyboard = add_cancel_button("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data, product_id))
            return
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(MEDIA_DIR, f"{file_id}.jpg")
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        session = SessionLocal()
        try:
            if product_data:
                product = Product(
                    name=product_data["name"],
                    price=product_data["price"],
                    description=product_data.get("description"),
                    category_id=product_data.get("category_id"),
                    photo=file_path
                )
                session.add(product)
                session.commit()
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ!")
            elif product_id:
                product = session.query(Product).filter(Product.id == product_id).first()
                if not product:
                    bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                product.photo = file_path
                session.commit()
                bot.send_message(message.chat.id, f"‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        finally:
            session.close()
            if product_data and user_id in admin_data:
                admin_data.pop(user_id, None)

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
    def edit_product_prompt(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        user_id = message.from_user.id
        admin_data[user_id] = {"cancelled": False}
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, edit_product_id)

    def edit_product_id(message):
        user_id = message.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        if admin_data[user_id].get("cancelled"):
            return
        try:
            product_id = int(message.text)
        except ValueError:
            text, keyboard = add_cancel_button("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
            bot.register_next_step_handler(msg, edit_product_id)
            return
        admin_data[user_id]["product_id"] = product_id
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, edit_product_name)

    def edit_product_name(message):
        user_id = message.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        if admin_data[user_id].get("cancelled"):
            return
        admin_data[user_id]["name"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, edit_product_price)

    def edit_product_price(message):
        user_id = message.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        if admin_data[user_id].get("cancelled"):
            return
        if message.text.lower() == "–Ω–µ—Ç" or not message.text.strip():
            admin_data[user_id]["price"] = None
        else:
            try:
                admin_data[user_id]["price"] = float(message.text)
            except ValueError:
                text, keyboard = add_cancel_button("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–∏–ª–∏ '–Ω–µ—Ç'):")
                msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
                bot.register_next_step_handler(msg, edit_product_price)
                return
        text, keyboard = add_cancel_button("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, edit_product_description)

    def edit_product_description(message):
        user_id = message.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        if admin_data[user_id].get("cancelled"):
            return
        admin_data[user_id]["description"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        text, keyboard = add_cancel_button("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ):")
        msg = bot.send_message(message.chat.id, text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_edit_photo)

    def process_edit_photo(message):
        user_id = message.from_user.id
        admin_data.setdefault(user_id, {"cancelled": False})
        if admin_data[user_id].get("cancelled"):
            return
        kwargs = {k: v for k, v in admin_data[user_id].items() if
                  k in ["name", "price", "description"] and v is not None}

        if message.text and message.text.lower() == "–Ω–µ—Ç":
            product = ProductService.update_product(admin_data[user_id]["product_id"], **kwargs)
            if product:
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            admin_data.pop(user_id, None)
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(MEDIA_DIR, f"{file_id}.jpg")
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        session = SessionLocal()
        try:
            product = session.query(Product).filter(Product.id == admin_data[user_id]["product_id"]).first()
            if not product:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            for k, v in kwargs.items():
                setattr(product, k, v)
            product.photo = file_path
            session.commit()
            bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ!")
        finally:
            session.close()
            admin_data.pop(user_id, None)
    # (–§—É–Ω–∫—Ü–∏–∏ edit_product_id, edit_product_name, edit_product_price, edit_product_description, process_edit_photo –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏,
    # —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π cancelled —á–µ—Ä–µ–∑ admin_data[user_id].get("cancelled"))

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
    @bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    def show_orders(message):
        try:
            orders = OrderService.get_all_orders()
            if not orders:
                bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            for order in orders:
                user_name = order.name if order.name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                total = sum((item.product.price if item.product else 0) * item.quantity for item in order.items)
                response = f"–ó–∞–∫–∞–∑ #{order.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} | –°—Ç–∞—Ç—É—Å: {order.status} | –ò—Ç–æ–≥–æ: {total}‚ÇΩ"

                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data=f"edit_order:{order.id}"
                ))
                bot.send_message(message.chat.id, response, reply_markup=keyboard)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_order:"))
    def edit_order(call):
        if not is_admin(call):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        order_id = int(call.data.split(":")[1])
        keyboard = types.InlineKeyboardMarkup()
        for status in ["–ù–æ–≤—ã–π", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–í—ã–ø–æ–ª–Ω–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"]:
            keyboard.add(types.InlineKeyboardButton(
                status,
                callback_data=f"status:{order_id}:{status}"
            ))
        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("status:"))
    def change_order_status(call):
        if not is_admin(call):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        parts = call.data.split(":")
        order_id = int(parts[1])
        new_status = parts[2]

        try:
            order = OrderService.update_status(order_id, new_status)
            if order:
                bot.edit_message_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("status:"))
    def change_order_status(call):
        if not is_admin(call):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        parts = call.data.split(":")
        order_id = int(parts[1])
        new_status = parts[2]

        try:
            order = OrderService.update_status(order_id, new_status)
            if order:
                bot.edit_message_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

