# admin.py
import os
from telebot import types
from services.product_service import ProductService
from services.order_service import OrderService
from services.category_service import CategoryService
from utils.logger import logger
from services.db import SessionLocal
from models.product import Product

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
admin_data = {}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (Telegram ID)
ADMIN_IDS = [328729390]

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤
MEDIA_DIR = "media"
os.makedirs(MEDIA_DIR, exist_ok=True)


def main_keyboard(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user_id in ADMIN_IDS:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    return keyboard


def register(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    """

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
    def is_admin(message):
        return message.from_user.id in ADMIN_IDS

    # --- –°—Ç–∞—Ä—Ç ---
    @bot.message_handler(commands=['start'])
    def start(message):
        kb = main_keyboard(message.from_user.id)
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        if user_id in ADMIN_IDS:
            bot.send_message(
                message.chat.id,
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=kb
            )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        else:
            bot.send_message(
                message.chat.id,
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.",
                reply_markup=kb
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

    # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ---
    @bot.message_handler(commands=["admin"])
    def admin_panel(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
        keyboard = main_keyboard(message.from_user.id)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    def start_add_product(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, process_product_name)

    def process_product_name(message):
        admin_data[message.from_user.id] = {"name": message.text}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, process_product_price)

    def process_product_price(message):
        admin_data[message.from_user.id]["price"] = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(msg, process_product_description)

    def process_product_description(message):
        desc = message.text
        admin_data[message.from_user.id]["description"] = None if desc.lower() == "–Ω–µ—Ç" else desc

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = CategoryService.get_all_categories()
        keyboard = types.InlineKeyboardMarkup()
        for c in categories:
            keyboard.add(types.InlineKeyboardButton(c.name, callback_data=f"category:{c.id}"))
        keyboard.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category:new"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def process_category(call):
        user_id = call.from_user.id
        if not is_admin(call):
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        cat_id = call.data.split(":")[1]

        if cat_id == "new":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            bot.register_next_step_handler(msg, add_new_category)
        else:
            admin_data[user_id]["category_id"] = int(cat_id)
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            msg = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data=admin_data[user_id]))

    def add_new_category(message):
        user_id = message.from_user.id
        category = CategoryService.add_category(message.text)
        if category:
            admin_data[user_id]["category_id"] = category["id"]
            msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data=admin_data[user_id]))
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ ---
    def save_product_photo(bot, message, product_data=None, product_id=None):
        if not message.photo:
            msg = bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
            bot.register_next_step_handler(msg, lambda m: save_product_photo(bot, m, product_data, product_id))
            return

        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(MEDIA_DIR, f"{file_id}.jpg")
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        session = SessionLocal()
        try:
            if product_data:
                product = Product(
                    name=product_data["name"],
                    price=product_data["price"],
                    description=product_data.get("description"),
                    category_id=product_data.get("category_id"),
                    photo=file_path
                )
                session.add(product)
                session.commit()
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ñ–æ—Ç–æ!")
            elif product_id:
                product = session.query(Product).filter(Product.id == product_id).first()
                if not product:
                    bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                product.photo = file_path
                session.commit()
                bot.send_message(message.chat.id, f"‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        finally:
            session.close()
            if product_data and message.from_user.id in admin_data:
                admin_data.pop(message.from_user.id, None)

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
    def edit_product_prompt(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, edit_product_id)

    def edit_product_id(message):
        try:
            product_id = int(message.text)
        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(msg, edit_product_id)
            return
        admin_data["product_id"] = product_id
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(msg, edit_product_name)

    def edit_product_name(message):
        admin_data["name"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(msg, edit_product_price)

    def edit_product_price(message):
        if message.text.lower() == "–Ω–µ—Ç" or not message.text.strip():
            admin_data["price"] = None
        else:
            try:
                admin_data["price"] = float(message.text)
            except ValueError:
                msg = bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–∏–ª–∏ '–Ω–µ—Ç'):")
                bot.register_next_step_handler(msg, edit_product_price)
                return
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(msg, edit_product_description)

    def edit_product_description(message):
        admin_data["description"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        msg = bot.send_message(message.chat.id,
                               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ):")
        bot.register_next_step_handler(msg, process_edit_photo)

    def process_edit_photo(message):
        if message.text and message.text.lower() == "–Ω–µ—Ç":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            kwargs = {k: v for k, v in admin_data.items() if k in ["name", "price", "description"] and v is not None}
            try:
                product = ProductService.update_product(admin_data["product_id"], **kwargs)
                if product:
                    bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            finally:
                admin_data.clear()
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        kwargs = {k: v for k, v in admin_data.items() if k in ["name", "price", "description"] and v is not None}
        session = SessionLocal()
        try:
            product = session.query(Product).filter(Product.id == admin_data["product_id"]).first()
            if not product:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            for k, v in kwargs.items():
                setattr(product, k, v)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = os.path.join(MEDIA_DIR, f"{file_id}.jpg")
            with open(file_path, 'wb') as f:
                f.write(downloaded_file)
            product.photo = file_path
            session.commit()
            bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{product.name}' –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ!")
        finally:
            session.close()
            admin_data.clear()

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ ---
    @bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    def show_orders(message):
        try:
            orders = OrderService.get_all_orders()
            if not orders:
                bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            response = ""
            for order in orders:
                user_name = order.name if order.name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                response += f"–ó–∞–∫–∞–∑ #{order.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
                total = 0
                for item in order.items:
                    product_name = item.product.name if item.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
                    subtotal = (item.product.price if item.product else 0) * item.quantity
                    total += subtotal
                    response += f"  - {product_name} x {item.quantity} = {subtotal}‚ÇΩ\n"
                response += f"–ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"

            bot.send_message(message.chat.id, response)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")



