from telebot import types
from services.product_service import ProductService
from services.order_service import OrderService
from services.category_service import CategoryService
from utils.logger import logger

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
admin_data = {}

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (Telegram ID)
ADMIN_IDS = [328729390]


def main_keyboard(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if user_id in ADMIN_IDS:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
        keyboard.add("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
        keyboard.add("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    return keyboard


def register(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    def is_admin(message):
        return message.from_user.id in ADMIN_IDS

    # –°—Ç–∞—Ä—Ç /start
    @bot.message_handler(commands=['start'])
    def start(message):
        kb = main_keyboard(message.from_user.id)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

    # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ---
    @bot.message_handler(commands=["admin"])
    def admin_panel(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return

        keyboard = main_keyboard(message.from_user.id)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    def start_add_product(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, process_product_name)

    def process_product_name(message):
        admin_data[message.from_user.id] = {"name": message.text}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, process_product_price)

    def process_product_price(message):
        admin_data[message.from_user.id]["price"] = float(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(msg, process_product_description)

    def process_product_description(message):
        desc = message.text
        admin_data[message.from_user.id]["description"] = None if desc.lower() == "–Ω–µ—Ç" else desc

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = CategoryService.get_all_categories()
        keyboard = types.InlineKeyboardMarkup()
        for c in categories:
            keyboard.add(types.InlineKeyboardButton(c.name, callback_data=f"category:{c.id}"))
        keyboard.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category:new"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def process_category(call):
        user_id = call.from_user.id
        if not is_admin(call):
            bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        cat_id = call.data.split(":")[1]

        if cat_id == "new":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            bot.register_next_step_handler(msg, add_new_category)
        else:
            admin_data[user_id]["category_id"] = int(cat_id)
            save_product(user_id, call.message.chat.id)

    def add_new_category(message):
        user_id = message.from_user.id
        category = CategoryService.add_category(message.text)
        if category:
            admin_data[user_id]["category_id"] = category["id"]
            save_product(user_id, message.chat.id)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    def save_product(user_id, chat_id):
        data = admin_data[user_id]
        product = ProductService.add_product(
            name=data["name"],
            price=data["price"],
            description=data.get("description"),
            category_id=data.get("category_id")
        )
        if product:
            bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
        admin_data.pop(user_id, None)

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ ---
    @bot.message_handler(func=lambda message: message.text == "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    def view_orders(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        try:
            orders = OrderService.list_all_orders()
            if not orders:
                bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.")
                return

            for order in orders:
                items_text = "\n".join(
                    [f"{i.product.name} x{i.quantity} - {i.price} —Ä—É–±." for i in order.products]
                )

                bot.send_message(
                    message.chat.id,
                    f"üÜî –ó–∞–∫–∞–∑ ‚Ññ{order.id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"–°—É–º–º–∞: {order.total} —Ä—É–±.\n"
                    f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery}\n"
                    f"–ê–¥—Ä–µ—Å: {order.address}\n"
                    f"–î–∞—Ç–∞: {order.created_at}\n"
                    f"–¢–æ–≤–∞—Ä—ã:\n{items_text}"
                )
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
    @bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
    def edit_product_prompt(message):
        if not is_admin(message):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, edit_product_id)

    def edit_product_id(message):
        try:
            product_id = int(message.text)
        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(msg, edit_product_id)
            return

        admin_data["product_id"] = product_id
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
        bot.register_next_step_handler(msg, edit_product_name)

    def edit_product_name(message):
        admin_data["name"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
        bot.register_next_step_handler(msg, edit_product_price)

    def edit_product_price(message):
        if message.text.lower() == "–Ω–µ—Ç" or not message.text.strip():
            admin_data["price"] = None
        else:
            try:
                admin_data["price"] = float(message.text)
            except ValueError:
                msg = bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–∏–ª–∏ '–Ω–µ—Ç'):")
                bot.register_next_step_handler(msg, edit_product_price)
                return

        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
        bot.register_next_step_handler(msg, edit_product_description)

    def edit_product_description(message):
        admin_data["description"] = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        kwargs = {k: v for k, v in admin_data.items() if k in ["name", "price", "description"] and v is not None}

        try:
            product = ProductService.update_product(admin_data["product_id"], **kwargs)
            if not product:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {product.name}")
                logger.info(f"–ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–∏–ª —Ç–æ–≤–∞—Ä: {product.id} - {product.name}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")

        admin_data.clear()